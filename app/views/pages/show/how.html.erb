<h2>How:</h2>

<p>
Issue triage is a simple app for a complex problem if you're interested you can <%= link_to "view the code on Github", "github.com/heroku/issue_triage" %>. After you've signed up with your Github credentials you can add a repo to triage by visiting <%= "the repos page", repos_path %>. Once a repo is successfully added you can subscribe to that repositories issues. Once subscribed, you'll receive an email a day with an open issue. All of this is powered by <a href='http://heroku.com'>Heroku</a> and <a href='https://github.com/defunkt/resque'>Resque</a> and powered by a <a href='http://www.postgresql.org/'>PostgreSQL</a> database.
</p>

<h2>Finding Issues</h2>

<p>
Once a repo has been registered, we immediately begin to pull issues for it in the background by calling
<pre><code>repo.populate_issues!</code></pre>

This will enqueue a job into Resque that will be run as soon as a worker becomes available.
</p>

To define this task we create a new class that has a perform action and specifies a queue, I did this in `app/repos.rb`:


    class PopulateIssues
      @queue = :populate_issues

      def self.perform(repo_id)
        repo = Repo.find(repo_id.to_i)
        repo.populate_all_open_isues
      end
    end

Here our queue is `popfulate_issues` and when run the `perform` class method will be called with an id element we pass in. You can enqueue elements by running:


